import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import 'dart:math';

class MoodLog {
  final int mood;
  final String timestamp;
  final String? journalEntry;
  final List<String>? tags;
  final String? moodName;

  MoodLog({
    required this.mood,
    required this.timestamp,
    this.journalEntry,
    this.tags,
    this.moodName,
  });

  factory MoodLog.fromJson(Map<String, dynamic> json) => MoodLog(
        mood: json['mood'],
        timestamp: json['timestamp'],
        journalEntry: json['journal_entry'],
        tags: json['tags']?.cast<String>(),
        moodName: json['mood_name'],
      );

  Map<String, dynamic> toJson() => {
        'mood': mood,
        'timestamp': timestamp,
        'journal_entry': journalEntry,
        'tags': tags,
        'mood_name': moodName,
      };
}

class MoodHistoryPage extends StatefulWidget {
  final List<MoodLog> moodLogs;

  const MoodHistoryPage({Key? key, required this.moodLogs}) : super(key: key);

  @override
  _MoodHistoryPageState createState() => _MoodHistoryPageState();
}

class _MoodHistoryPageState extends State<MoodHistoryPage>
    with SingleTickerProviderStateMixin {
  late List<MoodLog> _moodLogs;
  late TabController _tabController;
  bool _isEditMode = false, _isFilterApplied = false;
  DateTime? _startDate, _endDate;
  String? _selectedTagFilter;

  final Map<String, String> tagIcons = {
    'Sleep': 'üò¥',
    'Relationship': '‚ù§Ô∏è',
    'Family': 'üë®‚Äçüë©‚Äçüëß',
    'Work': 'üíº',
    'Health': 'üí™',
    'Social': 'üó£Ô∏è',
    'Hobby': 'üé®',
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _moodLogs = widget.moodLogs;
    _loadMoodLogs();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadMoodLogs() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> savedLogs = prefs.getStringList('mood_logs') ?? [];
    setState(() {
      _moodLogs = savedLogs.map((log) => MoodLog.fromJson(json.decode(log))).toList().reversed.toList();
    });
  }

  List<MoodLog> _getFilteredMoodLogs() {
    return _moodLogs.where((log) {
      final logDate = DateTime.parse(log.timestamp);
      return (!_isFilterApplied || (_startDate != null && _endDate != null && logDate.isAfter(_startDate!) && logDate.isBefore(_endDate!.add(const Duration(days: 1)))) &&
          (_selectedTagFilter == null || (log.tags?.contains(_selectedTagFilter) ?? false)));
    }).toList();
  }

  Future<void> _showDateRangePicker() async {
    final picked = await showDateRangePicker(
      context: context,
      firstDate: DateTime(2000),
      lastDate: DateTime.now(),
      initialDateRange: _startDate != null && _endDate != null
          ? DateTimeRange(start: _startDate!, end: _endDate!)
          : null,
      builder: (context, child) => Theme(
        data: ThemeData.light().copyWith(
          colorScheme: ColorScheme.light(primary: Colors.blue[800]!),
          dialogTheme: const DialogThemeData(backgroundColor: Colors.white),
        ),
        child: child!,
      ),
    );

    if (picked != null) {
      setState(() {
        _startDate = picked.start;
        _endDate = picked.end;
        _isFilterApplied = true;
      });
    }
  }

  void _clearFilters() {
    setState(() {
      _startDate = null;
      _endDate = null;
      _isFilterApplied = false;
      _selectedTagFilter = null;
    });
  }

  Future<void> _deleteMoodLog(int index) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> savedLogs = prefs.getStringList('mood_logs') ?? [];
    savedLogs.removeAt(_moodLogs.length - 1 - index);
    await prefs.setStringList('mood_logs', savedLogs);
    setState(() => _moodLogs.removeAt(index));
  }

  Future<bool> _confirmDeleteMoodLog(int index) async {
    final confirmDelete = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete Mood Log', style: TextStyle(color: Colors.blue[900])),
        content: Text('Are you sure you want to delete this mood log?', style: TextStyle(color: Colors.blue[700])),
        actions: [
          TextButton(onPressed: () => Navigator.of(context).pop(false), child: Text('Cancel', style: TextStyle(color: Colors.blue[700]))),
          ElevatedButton(style: ElevatedButton.styleFrom(backgroundColor: Colors.red), onPressed: () => Navigator.of(context).pop(true), child: const Text('Delete', style: TextStyle(color: Colors.white))),
        ],
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      ),
    );

    if (confirmDelete == true) {
      await _deleteMoodLog(index);
      return true;
    }
    return false;
  }

  void _toggleEditMode() => setState(() => _isEditMode = !_isEditMode);


  List<LineChartBarData> _createMoodTrendLine() {
    final filteredLogs = _getFilteredMoodLogs();
    if (filteredLogs.isEmpty) return [];
    final sortedLogs = List.from(filteredLogs)..sort((a, b) => DateTime.parse(a.timestamp).compareTo(DateTime.parse(b.timestamp)));
    return [
      LineChartBarData(
        isCurved: true,
        color: Colors.blue[600],
        barWidth: 4,
        dotData: const FlDotData(show: true),
        belowBarData: BarAreaData(show: true, color: Colors.blue[200]!.withOpacity(0.3)),
        spots: sortedLogs.asMap().entries.map((entry) => FlSpot(entry.key.toDouble(), entry.value.mood.toDouble())).toList(),
      )
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue[50],
      appBar: AppBar(
        title: Text('Mood Journey', style: TextStyle(color: Colors.blue[900], fontWeight: FontWeight.bold, fontSize: 24)),
        backgroundColor: Colors.blue[50],
        iconTheme: IconThemeData(color: Colors.blue[900]),
        actions: [
          if (_tabController.index == 1) IconButton(icon: Icon(_isEditMode ? Icons.done : Icons.edit), onPressed: _toggleEditMode, color: Colors.blue[900]),
          if (_tabController.index < 2) IconButton(icon: Icon(_isFilterApplied || _selectedTagFilter != null ? Icons.filter_alt : Icons.filter_alt_outlined, color: _isFilterApplied || _selectedTagFilter != null ? Colors.blue[900] : Colors.blue[700]), onPressed: _showDateRangePicker),
          if (_isFilterApplied || _selectedTagFilter != null) IconButton(icon: const Icon(Icons.clear, color: Colors.red), onPressed: _clearFilters),
        ],
        bottom: TabBar(
          controller: _tabController,
          indicator: BoxDecoration(color: Colors.blue[800], borderRadius: BorderRadius.circular(12)),
          labelColor: Colors.white,
          unselectedLabelColor: Colors.blue[900],
          tabs: const [
            Tab(icon: Icon(Icons.trending_up), text: 'Trends'),
            Tab(icon: Icon(Icons.list), text: 'Logs'),
            Tab(icon: Icon(Icons.analytics), text: 'Analytics'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [_buildMoodTrendsView(), _buildMoodListView(), _buildMoodAnalyticsView()],
      ),
    );
  }

  Widget _buildMoodTrendsView() {
  final filteredLogs = _getFilteredMoodLogs();
  if (filteredLogs.isEmpty) return _buildEmptyStateView('No mood logs to display');
  
  return SingleChildScrollView( // Wrap in SingleChildScrollView
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          if (_isFilterApplied) 
            Padding(
              padding: const EdgeInsets.only(bottom: 10), 
              child: Text('Showing trends from ${DateFormat('dd MMM yyyy').format(_startDate!)} to ${DateFormat('dd MMM yyyy').format(_endDate!)}', style: TextStyle(color: Colors.blue[700], fontStyle: FontStyle.italic))
            ),
          Text('Your Mood Evolution', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.blue[800])),
          const SizedBox(height: 10),
          _buildMoodTrendCard(),
          const SizedBox(height: 16),
          // Removed the _buildTagFilterChips() call
        ],
      ),
    ),
  );
}


  Widget _buildEmptyStateView(String message) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.mood_bad, size: 100, color: Colors.blue[200]),
          const SizedBox(height: 20),
          Text(message, style: TextStyle(fontSize: 20, color: Colors.blue[900], fontWeight: FontWeight.bold)),
          const SizedBox(height: 10),
          ElevatedButton(
            style: ElevatedButton.styleFrom(backgroundColor: Colors.blue[800], shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20))),
            onPressed: () {},
            child: const Text('Log Your First Mood', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  Widget _buildMoodTrendCard() {
    final filteredLogs = _getFilteredMoodLogs();
    if (filteredLogs.isEmpty) return const SizedBox.shrink();
    return LayoutBuilder(
      builder: (context, constraints) {
        return Card(
          color: Colors.white,
          elevation: 8,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: SizedBox(
              height: 300,
              width: constraints.maxWidth,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: SizedBox(
                  width: max(constraints.maxWidth, filteredLogs.length * 60.0),
                  child: LineChart(LineChartData(
                    lineBarsData: _createMoodTrendLine(),
                    titlesData: _buildChartTitles(),
                    gridData: _buildChartGridData(),
                    borderData: _buildChartBorderData(),
                    minX: 0,
                    maxX: (filteredLogs.length - 1).toDouble(),
                    minY: 0,
                    maxY: 5,
                  )),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMoodListView() {
  final filteredLogs = _getFilteredMoodLogs();
  if (filteredLogs.isEmpty) return _buildEmptyStateView('No mood logs to display');
  return SingleChildScrollView( // Wrap in SingleChildScrollView
    child: Column(
      children: [
        if (_isFilterApplied || _selectedTagFilter != null)
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                if (_isFilterApplied)
                  Text('Showing logs from ${DateFormat('dd MMM yyyy').format(_startDate!)} to ${DateFormat('dd MMM yyyy').format(_endDate!)}', 
                    style: TextStyle(color: Colors.blue[700], fontStyle: FontStyle.italic)),
                if (_selectedTagFilter != null)
                  Padding(
                    padding: const EdgeInsets.only(left: 8.0),
                    child: Chip(
                      label: Text('$_selectedTagFilter', style: const TextStyle(color: Colors.white, fontSize: 12)),
                      backgroundColor: Colors.blue[700],
                      deleteIcon: const Icon(Icons.clear, color: Colors.white, size: 14),
                      onDeleted: () => setState(() => _selectedTagFilter = null),
                    ),
                  ),
              ],
            ),
          ),
        ListView.builder(
          shrinkWrap: true, // Add this to prevent ListView from taking infinite height
          physics: const NeverScrollableScrollPhysics(), // Disable scrolling for the ListView
          itemCount: filteredLogs.length,
          itemBuilder: (context, index) {
            final log = filteredLogs[index];
            return Dismissible(
              key: Key(log.timestamp),
              background: Container(color: Colors.red, alignment: Alignment.centerRight, padding: const EdgeInsets.only(right: 20), child: const Icon(Icons.delete, color: Colors.white)),
              direction: _isEditMode ? DismissDirection.endToStart : DismissDirection.none,
              confirmDismiss: (direction) async => await _confirmDeleteMoodLog(index),
              child: Card(
                margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                elevation: 4,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                child: ExpansionTile(
                  leading: Icon(_getMoodIcon(log.mood), color: _getMoodColor(log.mood), size: 30),
                  title: Text(log.moodName ?? _getMoodText(log.mood), style: TextStyle(color: _getMoodColor(log.mood), fontWeight: FontWeight.bold)),
                  subtitle: Text(DateFormat('EEEE, dd MMM yyyy HH:mm').format(DateTime.parse(log.timestamp)), style: TextStyle(color: Colors.grey[600])),
                  trailing: _isEditMode 
                    ? IconButton(icon: const Icon(Icons.delete, color: Colors.red), onPressed: () => _confirmDeleteMoodLog(index)) 
                    : const Icon(Icons.expand_more),
                  children: [
                    if (log.journalEntry != null && log.journalEntry!.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text('Journal Entry:', style: TextStyle(fontWeight: FontWeight.bold)),
                            const SizedBox(height: 8),
                            Text(log.journalEntry!),
                          ],
                        ),
                      ),
                    if (log.tags != null && log.tags!.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(left: 16.0, right: 16.0, bottom: 16.0),
                        child: Wrap(
                          spacing: 8.0,
                          children: log.tags!.map((tag) => Chip(
                            label: Text('${tagIcons[tag] ?? ''} $tag', style: const TextStyle(fontSize: 12)),
                            backgroundColor: Colors.blue[100],
                            labelStyle: TextStyle(color: Colors.blue[900]),
                          )).toList(),
                        ),
                      ),
                  ],
                ),
              ),
            );
          },
        ),
      ],
    ),
  );
}

  Widget _buildMoodAnalyticsView() {
    final filteredLogs = _getFilteredMoodLogs();
    if (filteredLogs.isEmpty) return _buildEmptyStateView('No mood logs to analyze');
    
    final moodCounts = _calculateMoodCounts();
    final totalLogs = filteredLogs.length;
    final averageMood = filteredLogs.map((log) => log.mood).reduce((a, b) => a + b) / totalLogs;
    final tagAnalytics = _calculateTagAnalytics();

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (_isFilterApplied) 
            Padding(
              padding: const EdgeInsets.only(bottom: 10), 
              child: Text('Showing analytics from ${DateFormat('dd MMM yyyy').format(_startDate!)} to ${DateFormat('dd MMM yyyy').format(_endDate!)}', 
                style: TextStyle(color: Colors.blue[700], fontStyle: FontStyle.italic))
            ),
          if (_selectedTagFilter != null)
            Padding(
              padding: const EdgeInsets.only(bottom: 10),
              child: Chip(
                label: Text('Filtered by: $_selectedTagFilter', style: const TextStyle(color: Colors.white)),
                backgroundColor: Colors.blue[700],
                deleteIcon: const Icon(Icons.clear, color: Colors.white, size: 16),
                onDeleted: () => setState(() => _selectedTagFilter = null),
              ),
            ),
          Text('Mood Analytics', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.blue[900])),
          const SizedBox(height: 10),
          Expanded(
            child: ListView(
              children: [
                _buildMoodBreakdown(moodCounts),
                const SizedBox(height: 20),
                _buildMoodStatistics(totalLogs, averageMood),
                const SizedBox(height: 20),
                _buildTagAnalytics(tagAnalytics),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMoodBreakdown(Map<String, int> moodCounts) {
    return Card(
      color: Colors.white,
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Mood Distribution', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[900])),
            const SizedBox(height: 10),
            ...moodCounts.entries.map((entry) => _buildMoodDistributionRow(entry.key, entry.value, _getFilteredMoodLogs().length)),
          ],
        ),
      ),
    );
  }

  Widget _buildTagAnalytics(Map<String, Map<String, dynamic>> tagAnalytics) {
    if (tagAnalytics.isEmpty) return const SizedBox.shrink();
    
    return Card(
      color: Colors.white,
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Tag Analytics', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[900])),
            const SizedBox(height: 10),
            ...tagAnalytics.entries.map((entry) => _buildTagAnalyticsRow(
              entry.key, 
              entry.value['count'], 
              entry.value['avgMood'],
              _getFilteredMoodLogs().length
            )),
          ],
        ),
      ),
    );
  }

  Widget _buildTagAnalyticsRow(String tag, int count, double avgMood, int totalLogs) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Text('${tagIcons[tag] ?? ''} $tag', style: TextStyle(fontSize: 14, color: Colors.blue[700])),
          const SizedBox(width: 10),
          Expanded(
            child: LinearProgressIndicator(
              value: count / totalLogs,
              backgroundColor: Colors.blue[100],
              valueColor: AlwaysStoppedAnimation<Color>(Colors.blue[600]!),
            ),
          ),
          const SizedBox(width: 10),
          Text('$count (${(count / totalLogs * 100).toStringAsFixed(1)}%)', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[900])),
          const SizedBox(width: 10),
          Text('Avg: ${avgMood.toStringAsFixed(1)}', style: TextStyle(fontStyle: FontStyle.italic, color: Colors.blue[700])),
        ],
      ),
    );
  }

  Widget _buildMoodStatistics(int totalLogs, double averageMood) {
    return Card(
      color: Colors.white,
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Mood Statistics', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[900])),
            const SizedBox(height: 10),
            _buildStatRow('Total Entries', totalLogs.toString()),
            _buildStatRow('Average Mood', averageMood.toStringAsFixed(2)),
            _buildStatRow('Most Common Mood', _findMostCommonMood()),
          ],
        ),
      ),
    );
  }

  Widget _buildMoodDistributionRow(String mood, int count, int totalLogs) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Text(mood, style: TextStyle(fontSize: 14, color: Colors.blue[700])),
          const SizedBox(width: 10),
          Expanded(
            child: LinearProgressIndicator(
              value: count / totalLogs,
              backgroundColor: Colors.blue[100],
              valueColor: AlwaysStoppedAnimation<Color>(_getMoodColor(['Very Sad', 'Sad', 'Neutral', 'Happy', 'Very Happy'].indexOf(mood) + 1)),
            ),
          ),
          const SizedBox(width: 10),
          Text('$count (${(count / totalLogs * 100).toStringAsFixed(1)}%)', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[900])),
        ],
      ),
    );
  }

  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: TextStyle(color: Colors.blue[800], fontSize: 14)),
          Text(value, style: TextStyle(color: Colors.blue[900], fontWeight: FontWeight.bold, fontSize: 14)),
        ],
      ),
    );
  }

  FlTitlesData _buildChartTitles() {
    final filteredLogs = _getFilteredMoodLogs();
    return FlTitlesData(
      leftTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      bottomTitles: AxisTitles(
        sideTitles: SideTitles(
          showTitles: true,
          getTitlesWidget: (value, meta) {
            if (value.toInt() >= 0 && value.toInt() < filteredLogs.length) {
              final date = DateTime.parse(filteredLogs[value.toInt()].timestamp);
              return Text('${date.day}/${date.month}', style: const TextStyle(fontSize: 10));
            }
            return const Text('');
          },
        ),
      ),
      topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
    );
  }

  FlGridData _buildChartGridData() {
    return FlGridData(
      show: true,
      drawVerticalLine: false,
      horizontalInterval: 1,
      getDrawingHorizontalLine: (value) => FlLine(color: Colors.blue[200]!, strokeWidth: 1),
    );
  }

  FlBorderData _buildChartBorderData() {
    return FlBorderData(show: false);
  }

  String _getMoodText(int mood) => ['Very Sad', 'Sad', 'Neutral', 'Happy', 'Very Happy'][mood - 1];

  Color _getMoodColor(int mood) => [Colors.red, Colors.orange, Colors.yellow, Colors.green, Colors.blue][mood - 1];

  IconData _getMoodIcon(int mood) => [
    Icons.sentiment_very_dissatisfied,
    Icons.sentiment_dissatisfied,
    Icons.sentiment_neutral,
    Icons.sentiment_satisfied,
    Icons.sentiment_very_satisfied
  ][mood - 1];

  String _findMostCommonMood() {
    final filteredLogs = _getFilteredMoodLogs();
    if (filteredLogs.isEmpty) return 'N/A';
    final moodCounts = _calculateMoodCounts();
    return moodCounts.entries.reduce((a, b) => a.value > b.value ? a : b).key;
  }

  Map<String, int> _calculateMoodCounts() {
    final filteredLogs = _getFilteredMoodLogs();
    final moodCounts = {'Very Sad': 0, 'Sad': 0, 'Neutral': 0, 'Happy': 0, 'Very Happy': 0};
    for (var log in filteredLogs) {
      final moodText = log.moodName ?? _getMoodText(log.mood);
      moodCounts[moodText] = (moodCounts[moodText] ?? 0) + 1;
    }
    return moodCounts;
  }

  Map<String, Map<String, dynamic>> _calculateTagAnalytics() {
    final filteredLogs = _getFilteredMoodLogs();
    final Map<String, Map<String, dynamic>> tagStats = {};
    
    for (var log in filteredLogs) {
      if (log.tags != null && log.tags!.isNotEmpty) {
        for (var tag in log.tags!) {
          tagStats.putIfAbsent(tag, () => {'count': 0, 'totalMood': 0, 'avgMood': 0.0});
          tagStats[tag]!['count']++;
          tagStats[tag]!['totalMood'] += log.mood;
        }
      }
    }
    
    tagStats.forEach((tag, stats) {
      stats['avgMood'] = stats['totalMood'] / stats['count'];
    });
    
    return Map.fromEntries(tagStats.entries.toList()..sort((a, b) => b.value['count'].compareTo(a.value['count'])));
  }
}

class MoodHistoryExtension {
  static Future<void> logMood(MoodLog moodData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      List<String> moodLogs = prefs.getStringList('mood_logs') ?? [];
      moodLogs.add(json.encode(moodData.toJson()));
      await prefs.setStringList('mood_logs', moodLogs);
    } catch (e) {
      print('Error logging mood: $e');
    }
  }
}
