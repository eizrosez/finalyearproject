import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Settings App',
      theme: ThemeData(
        primaryColor: const Color(0xFF3F51B5),
        scaffoldBackgroundColor: const Color(0xFFE8EAF6),
        textTheme: const TextTheme(
            bodyLarge: TextStyle(color: Colors.black87),
            bodyMedium: TextStyle(color: Colors.black54)),
        appBarTheme: const AppBarTheme(backgroundColor: Color(0xFF3F51B5)),
      ),
      home: const SettingsPage(),
    );
  }
}

class SettingsPage extends StatefulWidget {
  const SettingsPage({super.key});

  @override
  State<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Settings', style: TextStyle(color: Colors.white))),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader('Settings'),
              const SizedBox(height: 20),
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children: [
                      _buildSettingsCard(
                        title: 'Account',
                        children: [
                          _buildSettingsItem(Icons.person, 'Profile', 'Edit your personal information', () {
                            Navigator.push(context, MaterialPageRoute(builder: (context) => const ProfilePage()));
                          }),
                          _buildDivider(),
                          _buildSettingsItem(Icons.cloud_upload, 'Backup & Sync', 'Manage your data across devices', () {
                            Navigator.push(context, MaterialPageRoute(builder: (context) => const BackupSyncPage()));
                          }),
                        ],
                      ),
                      const SizedBox(height: 16),
                      _buildSettingsCard(
                        title: 'About',
                        children: [
                          _buildSettingsItem(Icons.info, 'App Information', 'Version 1.0.0', () {
                            Navigator.push(context, MaterialPageRoute(builder: (context) => const AppInfoPage()));
                          }),
                          _buildDivider(),
                          _buildSettingsItem(Icons.help, 'Help & Support', 'Get assistance', () {
                            Navigator.push(context, MaterialPageRoute(builder: (context) => const HelpSupportPage()));
                          }),
                          _buildDivider(),
                          _buildSettingsItem(Icons.privacy_tip, 'Privacy Policy', null, () {
                            Navigator.push(context, MaterialPageRoute(builder: (context) => const PrivacyPolicyPage()));
                          }),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(String title) => Text(title, style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black87));

  Widget _buildSettingsCard({required String title, required List<Widget> children}) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ListTile(
            title: Text(title, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black87)),
          ),
          const Divider(height: 1, color: Colors.grey),
          ...children,
        ],

      ),
    );
  }

  Widget _buildSettingsItem(IconData icon, String title, String? subtitle, VoidCallback? onTap) {
    return ListTile(
      leading: Icon(icon, color: Colors.blue),
      title: Text(title, style: const TextStyle(color: Colors.black87)),
      subtitle: subtitle != null ? Text(subtitle, style: const TextStyle(color: Colors.black54)) : null,
      trailing: const Icon(Icons.arrow_forward_ios, color: Colors.blue),
      onTap: onTap,
    );
  }

  Widget _buildDivider() => const Divider(color: Colors.white30, indent: 16, endIndent: 16);
}

// Profile Page
class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  int _selectedAvatarIndex = 0;
  bool _isLoading = true;

  final List<Map<String, dynamic>> _avatarOptions = [
    {'color': Colors.pink[100], 'icon': Icons.person},
    {'color': Colors.orange[100], 'icon': Icons.face},
    {'color': Colors.purple[100], 'icon': Icons.emoji_people},
    {'color': Colors.red[100], 'icon': Icons.sentiment_satisfied_alt},
    {'color': Colors.deepPurple[100], 'icon': Icons.face_retouching_natural},
  ];

  @override
  void initState() {
    super.initState();
    _loadProfileData();
  }

  Future<void> _loadProfileData() async {
    setState(() => _isLoading = true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final profileData = prefs.getString('profile_data');
      if (profileData != null) {
        final data = json.decode(profileData);
        setState(() {
          _nameController.text = data['name'] ?? 'John Doe';
          _emailController.text = data['email'] ?? 'john.doe@example.com';
          _phoneController.text = data['phone'] ?? '+1 234 567 890';
          _selectedAvatarIndex = data['avatarIndex'] ?? 0;
        });
      } else {
        _setDefaultProfileData();
      }
    } catch (e) {
      _showDialog('Error', 'Failed to load profile data: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _setDefaultProfileData() {
    setState(() {
      _nameController.text = 'John Doe';
      _emailController.text = 'john.doe@example.com';
      _phoneController.text = '+1 234 567 890';
    });
  }

  Future<void> _saveProfile() async {
    setState(() => _isLoading = true);
    try {
      final profileData = {
        'name': _nameController.text,
        'email': _emailController.text,
        'phone': _phoneController.text,
        'avatarIndex': _selectedAvatarIndex,
      };
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('profile_data', json.encode(profileData));
      _showDialog('Success', 'Profile updated successfully');
    } catch (e) {
      _showDialog('Error', 'Failed to save profile data: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _showDialog(String title, String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title, style: const TextStyle(color: Colors.blue)),
        content: Text(message, style: const TextStyle(color: Colors.blue)),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('OK', style: TextStyle(color: Colors.blue))),
        ],
      ),
    );
  }

  void _showAvatarSelectionDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Choose Avatar', style: TextStyle(color: Colors.blue)),
        content: SizedBox(
          width: double.maxFinite,
          child: GridView.builder(
            shrinkWrap: true,
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3, crossAxisSpacing: 10, mainAxisSpacing: 10),
            itemCount: _avatarOptions.length,
            itemBuilder: (context, index) {
              return GestureDetector(
                onTap: () {
                  setState(() => _selectedAvatarIndex = index);
                  Navigator.pop(context);
                },
                child: CircleAvatar(
                  radius: 30,
                  backgroundColor: _avatarOptions[index]['color'],
                  child: Icon(_avatarOptions[index]['icon'], size: 30, color: Colors.blue),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(appBar: AppBar(title: const Text('Profile')), body: const Center(child: CircularProgressIndicator()));
    }
    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _showAvatarSelectionDialog,
              child: Stack(
                children: [
                  CircleAvatar(
                    radius: 50,
                    backgroundColor: _avatarOptions[_selectedAvatarIndex]['color'],
                    child: Icon(_avatarOptions[_selectedAvatarIndex]['icon'], size: 50, color: Colors.blue),
                  ),
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: Container(
                      padding: const EdgeInsets.all(4),
                      decoration: BoxDecoration(color: Colors.blue, borderRadius: BorderRadius.circular(20)),
                      child: const Icon(Icons.edit, color: Colors.white, size: 20),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text('Tap to change avatar', style: TextStyle(color: Colors.blue, fontStyle: FontStyle.italic)),
            const SizedBox(height: 30),
            _buildTextField('Full Name', _nameController, Icons.person_outline),
            const SizedBox(height: 16),
            _buildTextField('Email', _emailController, Icons.email_outlined, TextInputType.emailAddress),
            const SizedBox(height: 16),
            _buildTextField('Phone Number', _phoneController, Icons.phone_outlined, TextInputType.phone),
            const SizedBox(height: 30),
            _buildButton('Save Changes', _saveProfile),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField(String label, TextEditingController controller, IconData icon, [TextInputType keyboardType = TextInputType.text]) {
    return Container(
      decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(10), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
      child: TextField(
        controller: controller,
        keyboardType: keyboardType,
        style: const TextStyle(color: Colors.blue),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: Colors.blue.withOpacity(0.7)),
          prefixIcon: Icon(icon, color: Colors.blue.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        ),
      ),
    );
  }

  Widget _buildButton(String label, VoidCallback onPressed) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(backgroundColor: Colors.blue, foregroundColor: Colors.white, padding: const EdgeInsets.symmetric(vertical: 15)),
        child: Text(label),
      ),
    );
  }
}

// Backup & Sync Page
class BackupSyncPage extends StatefulWidget {
  const BackupSyncPage({super.key});

  @override
  State<BackupSyncPage> createState() => _BackupSyncPageState();
}

class _BackupSyncPageState extends State<BackupSyncPage> {
  bool _autoBackup = false;
  bool _syncWifiOnly = true;
  String _lastBackupDate = 'Never';
  final List<String> _backupFrequencies = ['Daily', 'Weekly', 'Monthly'];
  String _selectedFrequency = 'Weekly';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Backup & Sync')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildInfoCard('Last Backup', _lastBackupDate, Icons.history),
            const SizedBox(height: 20),
            _buildSettingsCard(
              title: 'Backup Settings',
              children: [
                _buildSwitchTile('Auto Backup', 'Automatically backup your data', _autoBackup, (value) => setState(() => _autoBackup = value)),
                _buildDivider(),
                _buildSwitchTile('Wi-Fi Only', 'Backup only when connected to Wi-Fi', _syncWifiOnly, (value) => setState(() => _syncWifiOnly = value)),
                _buildDivider(),
                _buildDropdownTile('Backup Frequency', _selectedFrequency, _backupFrequencies, (value) => setState(() => _selectedFrequency = value!)),
              ],
            ),
            const SizedBox(height: 20),
            _buildActionButton('Backup Now', Icons.backup, _performBackupNow),
            const SizedBox(height: 16),
            _buildActionButton('Restore from Backup', Icons.restore, _restoreFromBackup, isOutlined: true),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoCard(String title, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(10), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
      child: Row(
        children: [
          Icon(icon, color: Colors.blue, size: 40),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title, style: const TextStyle(color: Colors.blue, fontSize: 14)),
                const SizedBox(height: 4),
                Text(value, style: const TextStyle(color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsCard({required String title, required List<Widget> children}) {
    return Container(
      decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(10), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.only(left: 16, top: 16, bottom: 8),
            child: Text(title, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.blue)),
          ),
          ...children,
        ],
      ),
    );
  }

  Widget _buildSwitchTile(String title, String subtitle, bool value, ValueChanged<bool> onChanged) {
    return SwitchListTile(
      title: Text(title, style: const TextStyle(color: Colors.blue)),
      subtitle: Text(subtitle, style: TextStyle(color: Colors.blue[200])),
      value: value,
      onChanged: onChanged,
      activeColor: Colors.blue,
    );
  }

  Widget _buildDropdownTile(String title, String value, List<String> items, ValueChanged<String?> onChanged) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Row(
        children: [
          Expanded(child: Text(title, style: const TextStyle(color: Colors.blue, fontSize: 16))),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
            decoration: BoxDecoration(borderRadius: BorderRadius.circular(8), color: Colors.white),
            child: DropdownButton<String>(
              value: value,
              items: items.map((item) => DropdownMenuItem<String>(value: item, child: Text(item, style: const TextStyle(color: Colors.blue)))).toList(),
              onChanged: onChanged,
              style: const TextStyle(color: Colors.blue),
              dropdownColor: Colors.white,
              underline: Container(),
              icon: const Icon(Icons.arrow_drop_down, color: Colors.blue),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton(String label, IconData icon, VoidCallback onPressed, {bool isOutlined = false}) {
    return SizedBox(
      width: double.infinity,
      child: isOutlined
          ? OutlinedButton.icon(
              onPressed: onPressed,
              icon: Icon(icon, color: Colors.blue),
              label: Text(label, style: const TextStyle(color: Colors.blue)),
              style: OutlinedButton.styleFrom(side: const BorderSide(color: Colors.blueAccent), padding: const EdgeInsets.symmetric(vertical: 15)),
            )
          : ElevatedButton.icon(
              onPressed: onPressed,
              icon: Icon(icon, color: Colors.white),
              label: Text(label, style: const TextStyle(color: Colors.white)),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue, padding: const EdgeInsets.symmetric(vertical: 15)),
            ),
    );
  }

  void _performBackupNow() {
    showDialog(
      context: context,
      builder: (context) => const AlertDialog(
        title: Text('Backing up...', style: TextStyle(color: Colors.blue)),
        content: Column(mainAxisSize: MainAxisSize.min, children: [
          CircularProgressIndicator(color: Colors.blue),
          SizedBox(height: 16),
          Text('Please wait while we backup your data...', style: TextStyle(color: Colors.blue)),
        ]),
      ),
    );

    Future.delayed(const Duration(seconds: 2), () {
      Navigator.pop(context);
      setState(() {
        final now = DateTime.now();
        _lastBackupDate = '${now.day}/${now.month}/${now.year} ${now.hour}:${now.minute}';
      });
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Backup completed successfully')));
    });
  }

  void _restoreFromBackup() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Restore from Backup', style: TextStyle(color: Colors.blue)),
        content: const Text('Are you sure you want to restore your data from the last backup? This will replace your current data.', style: TextStyle(color: Colors.blue)),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('Cancel', style: TextStyle(color: Colors.blue))),
          ElevatedButton(onPressed: () => Navigator.pop(context), style: ElevatedButton.styleFrom(backgroundColor: Colors.blue), child: const Text('Restore')),
        ],
      ),
    );
  }

  Widget _buildDivider() => const Divider(color: Colors.blueAccent, indent: 16, endIndent: 16);
}

// App Information Page
class AppInfoPage extends StatelessWidget {
  const AppInfoPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('App Information')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              width: 100,
              height: 100,
              decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(20), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
              child: const Icon(Icons.app_settings_alt, size: 60, color: Colors.blue),
            ),
            const SizedBox(height: 16),
            const Text('Zenith', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blue)),
            Text('Version 1.0.0 (Build 100)', style: TextStyle(fontSize: 16, color: Colors.blue[200])),
            const SizedBox(height: 30),
            _buildInfoCard('App Details', [
              _buildInfoItem('Release Date', 'March 24, 2025'),
              _buildInfoItem('Last Updated', 'March 24, 2025'),
              _buildInfoItem('Size', '15.4 MB'),
              _buildInfoItem('Flutter Version', '3.16.0'),
            ]),
            const SizedBox(height: 30),
            OutlinedButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Checking for updates...')));
              },
              icon: const Icon(Icons.system_update, color: Colors.blue),
              label: const Text('Check for Updates', style: TextStyle(color: Colors.blue)),
              style: OutlinedButton.styleFrom(foregroundColor: Colors.blue, side: const BorderSide(color: Colors.blueAccent), padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12)),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoCard(String title, List<Widget> items) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(10), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(title, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.blue)),
          ),
          const Divider(color: Colors.blueAccent, height: 1),
          ...items,
        ],
      ),
    );
  }

  Widget _buildInfoItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: TextStyle(fontSize: 16, color: Colors.blue[200])),
          Text(value, style: const TextStyle(fontSize: 16, color: Colors.blue, fontWeight: FontWeight.w500)),
        ],
      ),
    );
  }
}

// Help & Support Page
class HelpSupportPage extends StatelessWidget {
  const HelpSupportPage({super.key});
  
  BuildContext? get context => null;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Help & Support')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Frequently Asked Questions', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.blue)),
              const SizedBox(height: 16),
              _buildFaqItem('How do I use the Mood Garden?',
                  'The Mood Garden visually represents your logged moods over time. Each plant type corresponds to a different mood, and the number of plants indicates how many times you\'ve logged that mood. Tap "View Full Garden" to see a detailed overview and track your mood trends.'),
              _buildFaqItem('How do I log a mood?',
                  'To log your mood, tap the "+" button on the main navigation bar. You can select your current mood from a range of options (Very Sad to Very Happy), add a journal entry to describe your feelings, and tag relevant aspects of your day (e.g., Work, Sleep, Social).'),
              _buildFaqItem('What are the daily mindfulness challenges?',
                  'The daily mindfulness challenges are designed to help you incorporate brief mindfulness exercises into your day. These challenges, such as "Breathing Focus" and "Body Scan", offer guided practices to promote relaxation and self-awareness. Each challenge includes a duration and clear instructions to help you get started. After completing a challenge, you can log how it made you feel.'),
              _buildFaqItem('How do I create an account?',
                  'To create an account, go to the login screen and tap on "Sign Up". Fill in your details and follow the on-screen instructions.'),
              _buildFaqItem('How can I reset my password?',
                  'You can reset your password by tapping on "Forgot Password" on the login screen. Enter your email address and follow the instructions sent to your email.'),
              _buildFaqItem('Is my data secure?',
                  'Yes, we use industry-standard encryption to protect your data. Your privacy and security are our top priorities.'),
              _buildFaqItem('How do I delete my account?',
                  'To delete your account, go to Profile > Account Settings > Delete Account. Please note that this action is irreversible and all your data will be permanently deleted.'),
            _buildFaqItem(
                'How do I use the Mood Garden?',
                'The Mood Garden visually represents your logged moods over time. Each plant type corresponds to a different mood, and the number of plants indicates how many times you\'ve logged that mood. Tap "View Full Garden" to see a detailed overview and track your mood trends.',
                ),
            _buildFaqItem(
                'How do I log a mood?',
                'To log your mood, tap the "+" button on the main navigation bar. You can select your current mood from a range of options (Very Sad to Very Happy), add a journal entry to describe your feelings, and tag relevant aspects of your day (e.g., Work, Sleep, Social).',
                ),
            _buildFaqItem(
                'What are the daily mindfulness challenges?',
                'The daily mindfulness challenges are designed to help you incorporate brief mindfulness exercises into your day. These challenges, such as "Breathing Focus" and "Body Scan", offer guided practices to promote relaxation and self-awareness. Each challenge includes a duration and clear instructions to help you get started. After completing a challenge, you can log how it made you feel.',
                ),
            const SizedBox(height: 20),
            _buildHelpSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildFaqItem(String question, String answer) {
    return ExpansionTile(
      title: Text(question, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500, color: Colors.blue)),
      collapsedIconColor: Colors.blue,
      iconColor: Colors.blue,
      backgroundColor: Colors.transparent,
      collapsedBackgroundColor: Colors.transparent,
      childrenPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      children: [Text(answer, style: TextStyle(fontSize: 14, color: Colors.blue[200]))],
    );
  }

  Widget _buildHelpSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(10), boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.1), spreadRadius: 2, blurRadius: 5)]),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Need emotional support?', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.blue)),
          const SizedBox(height: 16),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context!).showSnackBar(const SnackBar(content: Text('Support ticket functionality would go here')));
              },
              icon: const Icon(Icons.support_agent),
              label: const Text('Call Befrienders (+603-7627 2929) or Talian Kasih (15999)'),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue, foregroundColor: Colors.white, padding: const EdgeInsets.symmetric(vertical: 15)),
            ),
          ),
        ],
      ),
    );
  }
}

// Privacy Policy Page
class PrivacyPolicyPage extends StatelessWidget {
  const PrivacyPolicyPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Privacy Policy')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Privacy Policy', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blue)),
            const SizedBox(height: 20),
            Text('Your privacy is important to us. This privacy policy explains how we collect, use, and protect your information.', style: TextStyle(color: Colors.blue[200])),
            const SizedBox(height: 20),
            _buildPolicySection('1. Information We Collect', 'We may collect personal information such as your name, email address, and phone number when you register for an account or use our services.'),
            const SizedBox(height: 20),
            _buildPolicySection('2. How We Use Your Information', 'We use your information to provide and improve our services, communicate with you, and personalize your experience.'),
            const SizedBox(height: 20),
            _buildPolicySection('3. Data Security', 'We take reasonable measures to protect your information from unauthorized access, use, or disclosure.'),
            const SizedBox(height: 20),
            _buildPolicySection('4. Changes to This Privacy Policy', 'We may update this privacy policy from time to time. We will notify you of any changes by posting the new policy on this page.'),
            const SizedBox(height: 20),
            _buildPolicySection('5. Contact Us', 'If you have any questions about this privacy policy, please contact us at support@example.com.'),
          ],
        ),
      ),
    );
  }

  Widget _buildPolicySection(String title, String content) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title, style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.blue)),
        Text(content, style: TextStyle(color: Colors.blue[200])),
      ],
    );
  }
}
