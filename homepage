// ignore_for_file: library_private_types_in_public_api, deprecated_member_use

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:curved_navigation_bar/curved_navigation_bar.dart';
import 'package:zenith/screens/garden.dart';
import 'cloudbreathing.dart';
import 'moodlogging.dart';
import 'moodhistory.dart';
import 'settings.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _currentIndex = 0;
  final List<Widget> _pages = [
    const HomeContent(),
    const CloudBreathingPage(),
    Container(), // Placeholder for FAB Mood Logging
    const MoodHistoryPage(moodLogs: [],),
    const SettingsPage(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBody: true,
      body: Stack(
        children: [
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF003973), Color(0xFF0099F7)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
          _pages[_currentIndex],
        ],
      ),
      bottomNavigationBar: CurvedNavigationBar(
        backgroundColor: Colors.transparent,
        color: Colors.white.withOpacity(0.95),
        buttonBackgroundColor: Colors.blueAccent.withOpacity(0.9),
        height: 60,
        index: _currentIndex,
        animationDuration: const Duration(milliseconds: 300),
        items: [
          _navItem(Icons.home, 'Home', _currentIndex == 0),
          _navItem(Icons.self_improvement, 'Breathe', _currentIndex == 1),
          const Icon(Icons.add, size: 40, color: Colors.white),
          _navItem(Icons.history, 'History', _currentIndex == 3),
          _navItem(Icons.settings, 'Settings', _currentIndex == 4),
        ],
        onTap: (index) {
          if (index != 2) setState(() => _currentIndex = index);
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => MoodLoggingPage(
              onMoodLogged: (moodData) {
                MoodHistoryExtension.logMood(moodData);
                _showConfirmation(context, moodData);
              },
            ),
          ),
        ),
        backgroundColor: Colors.blueAccent,
        child: const Icon(Icons.add, size: 30, color: Colors.white),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
    );
  }

  Widget _navItem(IconData icon, String label, bool isActive) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(icon, size: 24, color: isActive ? Colors.white : Colors.blueAccent),
        if (isActive) ...[
          const SizedBox(height: 2),
          Text(label, style: const TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold)),
        ],
      ],
    );
  }

  void _showConfirmation(BuildContext context, Map<String, dynamic> moodData) {
    String emoji = _getEmojiForMood(moodData['mood'] ?? 3);
    
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          elevation: 0,
          child: Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Color(0xFF5C6BC0), Color(0xFF3949AB)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(color: Colors.black.withOpacity(0.3), blurRadius: 15, offset: const Offset(0, 8)),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: const EdgeInsets.all(15),
                  decoration: BoxDecoration(color: Colors.white.withOpacity(0.2), shape: BoxShape.circle),
                  child: Text(emoji, style: const TextStyle(fontSize: 48)),
                ),
                const SizedBox(height: 16),
                Text('Mood Logged!', 
                  style: TextStyle(
                    color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold,
                    shadows: [Shadow(color: Colors.black.withOpacity(0.3), offset: const Offset(0, 2), blurRadius: 4)],
                  ),
                ),
                const SizedBox(height: 8),
                Text('Your ${moodData['mood_name'] ?? 'mood'} has been added to your garden.',
                  textAlign: TextAlign.center, style: const TextStyle(color: Colors.white, fontSize: 16)),
                const SizedBox(height: 24),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _actionButton(
                      icon: Icons.visibility,
                      label: 'View Garden',
                      color: Colors.greenAccent,
                      onTap: () {
                        Navigator.pop(context);
                        Navigator.push(context, MaterialPageRoute(builder: (context) => const GardenPage()));
                      },
                    ),
                    const SizedBox(width: 16),
                    _actionButton(
                      icon: Icons.close,
                      label: 'Close',
                      color: Colors.white.withOpacity(0.8),
                      onTap: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _actionButton({required IconData icon, required String label, required Color color, required VoidCallback onTap}) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.2),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: color, width: 1.5),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 20, color: color),
            const SizedBox(width: 6),
            Text(label, style: TextStyle(color: color, fontWeight: FontWeight.w600, fontSize: 14)),
          ],
        ),
      ),
    );
  }

  String _getEmojiForMood(int mood) {
    return ['üòû', 'üòî', 'üòê', 'üôÇ', 'üòä'][mood - 1];
  }
}

class MoodHistoryExtension {
  static void logMood(Map<String, dynamic> moodData) {}
}

class HomeContent extends StatefulWidget {
  const HomeContent({super.key});
  @override
  _HomeContentState createState() => _HomeContentState();
}

class _HomeContentState extends State<HomeContent> {
  final List<Map<String, dynamic>> challenges = [
    {
      'title': 'Breathing Focus',
      'description': 'Take 5 minutes today to practice mindful breathing while focusing on gratitude.',
      'duration': '5 min',
      'icon': Icons.air,
      'completed': false,
    },
    {
      'title': 'Body Scan',
      'description': 'Practice a full body scan meditation, noticing sensations without judgment.',
      'duration': '10 min',
      'icon': Icons.accessibility_new,
      'completed': false,
    },
  ];
  
  final List<String> affirmations = [
    "I am capable of handling whatever comes my way today with grace and strength.",
    "My challenges help me grow into my strongest self.",
    "I choose to focus on what I can control and let go of what I cannot.",
  ];
  
  int affirmationIndex = 0;
  late Map<String, dynamic> currentChallenge;
  bool isChallengeStarted = false;
  bool isChallengeCompleted = false;
  int secondsRemaining = 0;
  
  @override
  void initState() {
    super.initState();
    _selectRandomChallenge();
    affirmationIndex = Random().nextInt(affirmations.length);
  }
  
  void _selectRandomChallenge() {
    setState(() {
      currentChallenge = challenges[Random().nextInt(challenges.length)];
      isChallengeStarted = false;
      isChallengeCompleted = false;
    });
  }
  
  void _startChallenge() {
    final duration = int.parse(currentChallenge['duration'].split(' ')[0]) * 60;
    setState(() {
      isChallengeStarted = true;
      secondsRemaining = duration;
      _startTimer();
    });
    
    _showChallengeDialog(
      title: 'Starting Challenge',
      content: 'Take a moment to prepare yourself. Find a comfortable position and clear your mind.',
      buttonText: 'Begin',
    );
  }
  
  void _startTimer() {
    Future.delayed(const Duration(seconds: 1), () {
      if (!mounted) return;
      setState(() {
        if (secondsRemaining > 0) {
          secondsRemaining--;
          _startTimer();
        } else if (isChallengeStarted) {
          _completeChallenge();
        }
      });
    });
  }
  
  void _completeChallenge() {
    setState(() {
      isChallengeStarted = false;
      isChallengeCompleted = true;
      for (var challenge in challenges) {
        if (challenge['title'] == currentChallenge['title']) {
          challenge['completed'] = true;
          break;
        }
      }
    });
    
    _showChallengeDialog(
      title: 'Challenge Completed',
      content: 'Great job! How do you feel after completing this mindfulness practice?',
      buttonText: 'Done',
      showRating: true,
    );
  }
  
  void _showChallengeDialog({
    required String title,
    required String content,
    required String buttonText,
    bool showRating = false,
  }) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        int rating = 3;
        return StatefulBuilder(
          builder: (context, setState) {
            return Dialog(
              backgroundColor: Colors.transparent,
              elevation: 0,
              child: Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF7986CB), Color(0xFF3949AB)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.3), blurRadius: 15, offset: const Offset(0, 8))],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(showRating ? Icons.check_circle : Icons.self_improvement, size: 50, color: Colors.white),
                    const SizedBox(height: 15),
                    Text(title, style: const TextStyle(color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    Text(content, textAlign: TextAlign.center, style: const TextStyle(color: Colors.white, fontSize: 16)),
                    const SizedBox(height: 20),
                    if (showRating) ...[
                      const Text('How did this make you feel?', style: TextStyle(color: Colors.white, fontSize: 16)),
                      const SizedBox(height: 12),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: List.generate(5, (index) {
                          return IconButton(
                            icon: Icon(index < rating ? Icons.star : Icons.star_border, color: Colors.amberAccent, size: 32),
                            onPressed: () => setState(() => rating = index + 1),
                          );
                        }),
                      ),
                      const SizedBox(height: 10),
                    ],
                    ElevatedButton(
                      onPressed: () => Navigator.of(context).pop(),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.indigo,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                        padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                      ),
                      child: Text(buttonText, style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SizedBox(height: 20),
                    _buildInteractiveMoodGarden(context),
                    const SizedBox(height: 20),
                    _buildMindfulnessChallenge(context),
                    const SizedBox(height: 20),
                    _buildDailyAffirmations(context),
                    const SizedBox(height: 80),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    final hour = DateTime.now().hour;
    String greeting = hour < 12 ? 'Good Morning' : hour < 17 ? 'Good Afternoon' : 'Good Evening';
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$greeting, User!', style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white)),
        const SizedBox(height: 8),
        const Text('"Every day is a new beginning."', style: TextStyle(fontSize: 16, fontStyle: FontStyle.italic, color: Colors.white70)),
      ],
    );
  }

  Widget _buildInteractiveMoodGarden(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Icon(Icons.nature, color: Colors.lightGreenAccent),
                  SizedBox(width: 8),
                  Text('Mood Garden', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18)),
                ],
              ),
              Text('March 2025', style: TextStyle(color: Colors.white70, fontSize: 14)),
            ],
          ),
          const SizedBox(height: 10),
          SizedBox(
            height: 100,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildGardenItem('üå±', 3),
                _buildGardenItem('üåø', 5),
                _buildGardenItem('üå∑', 7),
                _buildGardenItem('üåª', 4),
                _buildGardenItem('üåº', 2),
              ],
            ),
          ),
          Center(
            child: TextButton(
              onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => const GardenPage())),
              child: const Text('View Full Garden', style: TextStyle(color: Colors.white)),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGardenItem(String emoji, int count) {
    return Column(
      children: [
        Text(emoji, style: const TextStyle(fontSize: 24)),
        const SizedBox(height: 4),
        Text(count.toString(), style: const TextStyle(color: Colors.white)),
      ],
    );
  }

  Widget _buildMindfulnessChallenge(BuildContext context) {
    final String timeDisplay = isChallengeStarted 
        ? '${secondsRemaining ~/ 60}:${(secondsRemaining % 60).toString().padLeft(2, '0')}' 
        : currentChallenge['duration'];
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Row(
                children: [
                  Icon(Icons.self_improvement, color: Colors.purpleAccent),
                  SizedBox(width: 8),
                  Text('Mindfulness Challenge', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18)),
                ],
              ),
              if (isChallengeStarted) 
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.purpleAccent.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.timer, color: Colors.white, size: 16),
                      const SizedBox(width: 4),
                      Text(timeDisplay, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                    ],
                  ),
                ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Icon(currentChallenge['icon'], color: Colors.white70, size: 22),
              const SizedBox(width: 10),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(currentChallenge['title'], style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 16)),
                        const SizedBox(width: 6),
                        if (isChallengeCompleted)
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                            decoration: BoxDecoration(color: Colors.green, borderRadius: BorderRadius.circular(4)),
                            child: const Text('COMPLETED', style: TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold)),
                          ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(currentChallenge['description'], style: const TextStyle(color: Colors.white, fontSize: 15)),
                    if (!isChallengeStarted && !isChallengeCompleted) ...[
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          const Icon(Icons.access_time, color: Colors.white70, size: 14),
                          const SizedBox(width: 4),
                          Text(currentChallenge['duration'], style: const TextStyle(color: Colors.white70, fontSize: 14)),
                        ],
                      ),
                    ],
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (!isChallengeStarted && !isChallengeCompleted)
                Expanded(
                  child: ElevatedButton(
                    onPressed: _startChallenge,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purpleAccent,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                    child: const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.play_arrow, size: 18),
                        SizedBox(width: 4),
                        Text('Start Challenge'),
                      ],
                    ),
                  ),
                )
              else if (isChallengeStarted)
                Expanded(
                  child: ElevatedButton(
                    onPressed: _completeChallenge,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.redAccent,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                    child: const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.stop, size: 18),
                        SizedBox(width: 4),
                        Text('End Challenge'),
                      ],
                    ),
                  ),
                )
              else
                Expanded(
                  child: ElevatedButton(
                    onPressed: _selectRandomChallenge,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blueAccent,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                    child: const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.swap_horiz, size: 18),
                        SizedBox(width: 4),
                        Text('New Challenge'),
                      ],
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDailyAffirmations(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.favorite, color: Colors.pinkAccent),
              SizedBox(width: 8),
              Text('Daily Affirmation', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18)),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            affirmations[affirmationIndex],
            style: const TextStyle(color: Colors.white, fontSize: 16, fontStyle: FontStyle.italic),
          ),
          const SizedBox(height: 16),
          Center(
            child: ElevatedButton(
              onPressed: () {
                setState(() => affirmationIndex = Random().nextInt(affirmations.length));
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.pinkAccent,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              ),
              child: const Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.refresh, size: 18),
                  SizedBox(width: 4),
                  Text('New Affirmation'),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
